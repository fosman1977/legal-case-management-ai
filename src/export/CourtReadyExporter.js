/**
 * Court-Ready Export System - Week 6 Day 5 Implementation
 * Professional court document generation
 */

import ChronologyTemplate from './templates/ChronologyTemplate';
import SkeletonArgumentTemplate from './templates/SkeletonArgumentTemplate';
import EvidenceScheduleTemplate from './templates/EvidenceScheduleTemplate';
import CaseAnalysisTemplate from './templates/CaseAnalysisTemplate';

class CourtReadyExporter {
  constructor() {
    this.templates = {
      chronology: new ChronologyTemplate(),
      skeletonArgument: new SkeletonArgumentTemplate(),
      evidenceSchedule: new EvidenceScheduleTemplate(),
      caseAnalysis: new CaseAnalysisTemplate()
    };
  }

  async exportChronology(analysis, caseContext) {
    const chronology = {
      header: this.generateHeader(caseContext),
      events: this.formatEventsForCourt(analysis.timeline),
      footer: this.generateFooter(analysis),
      metadata: {
        generated_by: "Legal Case Manager AI",
        generation_date: new Date().toISOString(),
        confidence_level: analysis.overall_confidence,
        ai_assisted: true,
        human_verified: false
      }
    };

    return await this.templates.chronology.generate(chronology);
  }

  formatEventsForCourt(events) {
    return events
      .filter(event => event.confidence > 0.9) // High confidence only
      .sort((a, b) => new Date(a.date) - new Date(b.date))
      .map((event, index) => ({
        paragraph: index + 1,
        date: this.formatDateForCourt(event.date),
        event: event.description,
        source: event.source_document,
        page_reference: event.page_reference || 'TBC'
      }));
  }

  async exportSkeletonFramework(claudeInsights, caseContext) {
    const framework = {
      header: this.generateHeader(caseContext),
      sections: {
        introduction: this.extractIntroduction(claudeInsights),
        legal_framework: this.extractLegalFramework(claudeInsights),
        factual_background: "[TO BE COMPLETED FROM CHRONOLOGY]",
        arguments: this.extractArgumentStructure(claudeInsights),
        conclusion: this.extractConclusion(claudeInsights)
      },
      authorities: this.extractAuthorities(claudeInsights),
      metadata: {
        ai_analysis_basis: "Anonymous pattern analysis",
        human_review_required: true,
        generated: new Date().toISOString()
      }
    };

    return await this.templates.skeletonArgument.generate(framework);
  }

  async exportClientReport(analysis, insights, caseContext) {
    const report = {
      executive_summary: this.generateExecutiveSummary(analysis, insights),
      case_strength_assessment: this.assessCaseStrength(insights),
      strategic_recommendations: insights.tactical_recommendations,
      evidence_analysis: this.summarizeEvidenceAnalysis(analysis),
      next_steps: this.extractNextSteps(insights),
      appendices: {
        document_schedule: analysis.document_list,
        timeline: analysis.timeline,
        ai_consultation_summary: this.sanitizeInsights(insights)
      }
    };

    return await this.templates.caseAnalysis.generate(report);
  }

  // Header generation for all court documents
  generateHeader(caseContext) {
    return {
      court: caseContext.court || 'IN THE HIGH COURT OF JUSTICE',
      division: caseContext.division || 'QUEEN\'S BENCH DIVISION',
      case_number: caseContext.case_number || '[CASE NUMBER]',
      between: {
        claimant: caseContext.claimant || '[CLAIMANT NAME]',
        defendant: caseContext.defendant || '[DEFENDANT NAME]'
      },
      document_type: '',
      date: new Date().toLocaleDateString('en-GB', {
        day: 'numeric',
        month: 'long', 
        year: 'numeric'
      })
    };
  }

  // Footer generation with metadata
  generateFooter(analysis) {
    return {
      document_info: 'Generated by Legal Case Manager AI',
      confidence_statement: `Overall confidence level: ${Math.round((analysis.overall_confidence || 0.85) * 100)}%`,
      review_note: 'This document requires human review before court submission',
      generation_timestamp: new Date().toISOString()
    };
  }

  // Court-specific date formatting
  formatDateForCourt(date) {
    return new Date(date).toLocaleDateString('en-GB', {
      day: 'numeric',
      month: 'long',
      year: 'numeric'
    });
  }

  // Extract introduction from Claude insights
  extractIntroduction(claudeInsights) {
    if (claudeInsights.strategic_framework) {
      const framework = claudeInsights.strategic_framework;
      // Extract first paragraph or overview section
      const lines = framework.split('\n').filter(line => line.trim());
      const introLines = lines.slice(0, 3).join(' ');
      return introLines || '[INTRODUCTION TO BE COMPLETED]';
    }
    return '[INTRODUCTION TO BE COMPLETED]';
  }

  // Extract legal framework from insights
  extractLegalFramework(claudeInsights) {
    const framework = [];
    
    if (claudeInsights.strategic_framework) {
      // Look for legal principles, statutes, case law references
      const text = claudeInsights.strategic_framework;
      
      // Extract mentions of legal concepts
      const legalConcepts = [
        'contract', 'negligence', 'liability', 'damages',
        'precedent', 'statute', 'regulation', 'case law'
      ];
      
      legalConcepts.forEach(concept => {
        if (text.toLowerCase().includes(concept)) {
          framework.push(`${concept.charAt(0).toUpperCase() + concept.slice(1)} considerations apply`);
        }
      });
    }

    return framework.length > 0 ? framework : ['[LEGAL FRAMEWORK TO BE COMPLETED]'];
  }

  // Extract argument structure from insights
  extractArgumentStructure(claudeInsights) {
    const arguments = [];
    
    if (claudeInsights.tactical_recommendations) {
      const recommendations = claudeInsights.tactical_recommendations;
      const lines = recommendations.split('\n').filter(line => line.trim());
      
      lines.forEach((line, index) => {
        if (line.includes('argument') || line.includes('contend') || line.includes('submit')) {
          arguments.push({
            heading: `Argument ${index + 1}`,
            content: line.trim(),
            authorities: '[AUTHORITIES TO BE ADDED]'
          });
        }
      });
    }

    return arguments.length > 0 ? arguments : [
      {
        heading: 'Primary Argument',
        content: '[TO BE COMPLETED FROM ANALYSIS]',
        authorities: '[AUTHORITIES TO BE ADDED]'
      }
    ];
  }

  // Extract conclusion from insights
  extractConclusion(claudeInsights) {
    if (claudeInsights.strategic_framework) {
      const framework = claudeInsights.strategic_framework;
      const lines = framework.split('\n').filter(line => line.trim());
      
      // Look for conclusion indicators
      const conclusionLine = lines.find(line => 
        line.toLowerCase().includes('conclusion') ||
        line.toLowerCase().includes('therefore') ||
        line.toLowerCase().includes('accordingly')
      );
      
      return conclusionLine || '[CONCLUSION TO BE COMPLETED]';
    }
    return '[CONCLUSION TO BE COMPLETED]';
  }

  // Extract legal authorities from insights
  extractAuthorities(claudeInsights) {
    const authorities = {
      cases: [],
      statutes: [],
      secondary: []
    };

    if (claudeInsights.raw_response) {
      const text = claudeInsights.raw_response;
      
      // Look for case citations (basic pattern matching)
      const casePattern = /\[?\d{4}\]?\s*[A-Z]{2,6}\s*\d+/g;
      const caseMatches = text.match(casePattern) || [];
      
      caseMatches.forEach(match => {
        authorities.cases.push({
          citation: match,
          relevance: 'TO BE COMPLETED',
          page_reference: 'TBC'
        });
      });

      // Look for statute references
      const statutePattern = /([A-Z][a-z\s]+)(Act|Regulations?)\s+\d{4}/g;
      const statuteMatches = text.match(statutePattern) || [];
      
      statuteMatches.forEach(match => {
        authorities.statutes.push({
          title: match,
          section: 'TBC',
          relevance: 'TO BE COMPLETED'
        });
      });
    }

    // Add placeholder if none found
    if (authorities.cases.length === 0 && authorities.statutes.length === 0) {
      authorities.cases.push({
        citation: '[CASE AUTHORITIES TO BE ADDED]',
        relevance: 'Primary authority',
        page_reference: 'TBC'
      });
    }

    return authorities;
  }

  // Generate executive summary for client report
  generateExecutiveSummary(analysis, insights) {
    return {
      case_overview: `Analysis of ${analysis.documents?.length || 0} documents completed`,
      key_findings: this.extractKeyFindings(insights),
      confidence_assessment: `Overall confidence: ${Math.round((insights.confidence || 0.85) * 100)}%`,
      recommendations: this.extractTopRecommendations(insights),
      next_actions: 'See detailed recommendations section'
    };
  }

  extractKeyFindings(insights) {
    const findings = [];
    
    if (insights.strategic_framework) {
      findings.push('Strategic legal framework identified');
    }
    
    if (insights.evidence_priorities) {
      findings.push('Evidence priorities established');
    }
    
    if (insights.risk_assessment) {
      findings.push('Risk factors analyzed');
    }

    return findings.length > 0 ? findings : ['Key findings identified from analysis'];
  }

  extractTopRecommendations(insights) {
    if (insights.actionable_items && insights.actionable_items.length > 0) {
      return insights.actionable_items
        .filter(item => item.priority === 'high')
        .slice(0, 3)
        .map(item => item.action);
    }
    
    return ['Review detailed strategic analysis', 'Consider evidence development', 'Plan next procedural steps'];
  }

  // Assess case strength from insights
  assessCaseStrength(insights) {
    const confidence = insights.confidence || 0.85;
    let strength = 'moderate';
    
    if (confidence > 0.9) strength = 'strong';
    else if (confidence < 0.7) strength = 'weak';

    return {
      overall_assessment: strength,
      confidence_level: Math.round(confidence * 100),
      strength_factors: this.identifyStrengthFactors(insights),
      weakness_factors: this.identifyWeaknesses(insights),
      recommendations: this.getStrengthRecommendations(strength)
    };
  }

  identifyStrengthFactors(insights) {
    const factors = [];
    
    if (insights.evidence_priorities) {
      factors.push('Evidence base available for analysis');
    }
    
    if (insights.strategic_framework) {
      factors.push('Clear legal framework identified');
    }

    return factors.length > 0 ? factors : ['Comprehensive analysis completed'];
  }

  identifyWeaknesses(insights) {
    const weaknesses = [];
    
    if (insights.confidence < 0.8) {
      weaknesses.push('Analysis confidence below optimal level');
    }

    return weaknesses;
  }

  getStrengthRecommendations(strength) {
    switch (strength) {
      case 'strong':
        return ['Proceed with confidence', 'Consider settlement from position of strength'];
      case 'weak':
        return ['Consider settlement options', 'Strengthen evidence base', 'Review legal strategy'];
      default:
        return ['Continue case development', 'Monitor evidence gathering', 'Review strategy regularly'];
    }
  }

  // Summarize evidence analysis
  summarizeEvidenceAnalysis(analysis) {
    return {
      total_documents: analysis.documents?.length || 0,
      document_types: this.categorizeDocuments(analysis.documents),
      confidence_summary: this.calculateConfidenceSummary(analysis.documents),
      key_evidence: this.identifyKeyEvidence(analysis.documents),
      evidence_gaps: this.identifyEvidenceGaps(analysis)
    };
  }

  categorizeDocuments(documents) {
    if (!documents) return {};
    
    const categories = {};
    documents.forEach(doc => {
      const type = doc.type || 'unknown';
      categories[type] = (categories[type] || 0) + 1;
    });
    
    return categories;
  }

  calculateConfidenceSummary(documents) {
    if (!documents || documents.length === 0) {
      return { average: 0, high_confidence: 0, total: 0 };
    }

    const confidences = documents.map(doc => doc.confidence || 0.9);
    const average = confidences.reduce((sum, conf) => sum + conf, 0) / confidences.length;
    const highConfidence = confidences.filter(conf => conf > 0.9).length;

    return {
      average: Math.round(average * 100),
      high_confidence: highConfidence,
      total: documents.length
    };
  }

  identifyKeyEvidence(documents) {
    if (!documents) return [];
    
    return documents
      .filter(doc => (doc.confidence || 0.9) > 0.95)
      .slice(0, 5)
      .map(doc => ({
        document: doc.name || 'Unknown document',
        type: doc.type || 'general',
        relevance: 'High confidence extraction'
      }));
  }

  identifyEvidenceGaps(analysis) {
    const gaps = [];
    
    if (!analysis.timeline || analysis.timeline.length < 3) {
      gaps.push('Limited chronological evidence');
    }
    
    if (!analysis.documents || analysis.documents.length < 5) {
      gaps.push('Limited document base');
    }

    return gaps;
  }

  // Extract next steps from insights
  extractNextSteps(insights) {
    const steps = [];
    
    if (insights.actionable_items && insights.actionable_items.length > 0) {
      insights.actionable_items.forEach((item, index) => {
        steps.push({
          step: index + 1,
          action: item.action,
          priority: item.priority || 'medium',
          timeline: item.deadline || 'TBC'
        });
      });
    } else {
      steps.push({
        step: 1,
        action: 'Review detailed analysis results',
        priority: 'high',
        timeline: 'Immediate'
      });
    }

    return steps.slice(0, 10); // Limit to top 10 actions
  }

  // Sanitize insights for client consumption
  sanitizeInsights(insights) {
    return {
      analysis_type: 'AI-powered pattern analysis',
      confidence_level: Math.round((insights.confidence || 0.85) * 100),
      privacy_protected: 'All client data anonymized during analysis',
      human_review: 'Professional review recommended',
      limitations: [
        'AI analysis requires human legal expertise verification',
        'Recommendations based on pattern recognition only',
        'Professional judgment required for final decisions'
      ]
    };
  }

  // Utility method for exporter information
  getExporterInfo() {
    return {
      name: 'Court-Ready Export System',
      version: '6.0.0',
      templates: Object.keys(this.templates),
      formats: ['chronology', 'skeleton_argument', 'evidence_schedule', 'client_report'],
      features: [
        'Court-compliant formatting',
        'Professional document structure',
        'Confidence-based filtering',
        'Human review indicators',
        'Multiple output formats'
      ]
    };
  }
}

export default CourtReadyExporter;