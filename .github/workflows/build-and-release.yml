name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ['20.18.0']
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Free up disk space (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          df -h
          
      - name: Verify Node version
        run: |
          node --version
          npm --version
          
      - name: Clear npm cache
        run: npm cache clean --force
          
      - name: Install dependencies with retry
        shell: bash
        run: |
          for i in {1..3}; do
            echo "Attempt $i of 3..."
            rm -rf node_modules
            if npm ci --prefer-offline --no-audit --progress=false; then
              echo "npm ci succeeded"
              break
            else
              echo "npm ci failed, trying npm install..."
              rm -f package-lock.json
              if npm install --no-audit --progress=false; then
                echo "npm install succeeded"
                break
              else
                echo "Attempt $i failed"
                if [ $i -eq 3 ]; then
                  echo "All attempts failed"
                  exit 1
                fi
                echo "Waiting 30 seconds before retry..."
                sleep 30
              fi
            fi
          done
        timeout-minutes: 35
        
      - name: Install Rollup native dependencies
        run: |
          npm install @rollup/rollup-darwin-arm64 @rollup/rollup-darwin-x64 @rollup/rollup-linux-x64-gnu @rollup/rollup-win32-x64-msvc --save-optional
        continue-on-error: true
        
      - name: Build application (includes Electron TypeScript)
        run: npm run build
        timeout-minutes: 30
        
      - name: Skip Code Signing for macOS (simplified build)
        if: matrix.os == 'macos-latest'
        run: echo "Skipping code signing to avoid certificate issues"
        
      - name: Build Electron app (macOS - no signing)
        if: matrix.os == 'macos-latest'
        run: npm run dist:mac
        timeout-minutes: 30
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_IDENTITY_AUTO_DISCOVERY: false
        continue-on-error: true
          
      - name: Build Electron app (Windows)
        if: matrix.os == 'windows-latest'
        run: npm run dist:win
        timeout-minutes: 30
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
          
      - name: Build Electron app (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: npm run dist:linux
        timeout-minutes: 30
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
          
      - name: Upload artifacts (Windows)
        if: matrix.os == 'windows-latest' && success()
        uses: actions/upload-artifact@v4
        with:
          name: windows-installers
          path: |
            release/*.exe
            release/*.msi
        continue-on-error: true
            
      - name: Upload artifacts (macOS)
        if: matrix.os == 'macos-latest' && success()
        uses: actions/upload-artifact@v4
        with:
          name: macos-installers
          path: |
            release/*.dmg
            release/*.zip
        continue-on-error: true
            
      - name: Upload artifacts (Linux)
        if: matrix.os == 'ubuntu-latest' && success()
        uses: actions/upload-artifact@v4
        with:
          name: linux-installers
          path: |
            release/*.AppImage
            release/*.deb
        continue-on-error: true

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') && always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/**/*
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            ## ðŸŽ‰ New Release of Legal Case Manager AI
            
            ### ðŸ“¦ Download Options
            
            **Windows Users:**
            - Download `.exe` installer for automatic installation
            - Or download `.portable.exe` for portable version (no installation)
            
            **macOS Users:**
            - Download `.dmg` for standard macOS installation
            - Or download `.zip` for manual installation
            
            **Linux Users:**
            - Download `.AppImage` for universal Linux compatibility
            - Or download `.deb` for Debian/Ubuntu systems
            
            ### âœ¨ What's New
            - Enhanced AI processing capabilities
            - Improved document analysis accuracy
            - Bug fixes and performance improvements
            
            ### ðŸš€ First Time Setup
            1. Download the appropriate installer for your system
            2. Run the installer and follow the setup wizard
            3. The app will automatically download and configure LocalAI
            4. Start analyzing legal documents with AI!
            
            ### ðŸ”„ Auto-Updates
            This version includes automatic update functionality. Future updates will be delivered seamlessly through the app.
            
            ---
            
            **Full Changelog:** ${{ github.event.compare }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}