version: '3.8'

# Air-Gapped Legal Case Management System
# Complete isolation - no external network dependencies
networks:
  agentic-internal:
    driver: bridge
    internal: true  # No external access
    ipam:
      config:
        - subnet: 172.20.0.0/24
  
  agentic-management:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.21.0.0/24

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/agentic/postgres
  
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/agentic/redis
  
  localai_models:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/agentic/models
  
  app_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/agentic/app_data
  
  backup_storage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/agentic/backups
  
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/agentic/prometheus
  
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/agentic/grafana

services:
  # Database Layer
  postgres:
    image: postgres:15-alpine
    container_name: agentic-postgres
    restart: unless-stopped
    networks:
      - agentic-internal
    environment:
      POSTGRES_DB: agentic_case_management
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./configs/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./configs/postgres/init-scripts:/docker-entrypoint-initdb.d:ro
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c logging_collector=on
      -c log_directory=/var/lib/postgresql/data/log
      -c log_filename=postgresql-%Y-%m-%d_%H%M%S.log
      -c log_rotation_age=1d
      -c log_rotation_size=100MB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d agentic_case_management"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    user: "999:999"

  # Cache Layer
  redis:
    image: redis:7-alpine
    container_name: agentic-redis
    restart: unless-stopped
    networks:
      - agentic-internal
    volumes:
      - redis_data:/data
      - ./configs/redis/redis.conf:/etc/redis/redis.conf:ro
    command: redis-server /etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    user: "999:999"

  # AI Processing (LocalAI)
  localai:
    image: localai/localai:latest
    container_name: agentic-localai
    restart: unless-stopped
    networks:
      - agentic-internal
    environment:
      REBUILD: false
      DEBUG: false
      MODELS_PATH: /models
      PRELOAD_MODELS_CONFIG: /models/preload.yaml
      CONTEXT_SIZE: 4096
      THREADS: 8
      LOCALAI_LOG_LEVEL: INFO
    volumes:
      - localai_models:/models:ro
      - ./configs/localai:/models:ro
    command: >
      /usr/bin/local-ai
      --models-path=/models
      --preload-models-config=/models/preload.yaml
      --context-size=4096
      --threads=8
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/models"]
      interval: 60s
      timeout: 30s
      retries: 3
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '8.0'
          memory: 16G
        reservations:
          cpus: '4.0'
          memory: 8G

  # Main Application
  agentic-app:
    image: agentic/case-management:latest
    container_name: agentic-app
    restart: unless-stopped
    networks:
      - agentic-internal
      - agentic-management
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/agentic_case_management
      REDIS_URL: redis://redis:6379
      LOCALAI_URL: http://localai:8080
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      LOG_LEVEL: info
      MAX_FILE_SIZE: 100MB
      AIRGAPPED_MODE: "true"
      DISABLE_TELEMETRY: "true"
      DISABLE_ANALYTICS: "true"
    volumes:
      - app_data:/app/data
      - backup_storage:/app/backups
      - ./configs/app:/app/config:ro
      - /var/log/agentic:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      localai:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    user: "1001:1001"
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G

  # Web Proxy (Internal Only)
  nginx:
    image: nginx:alpine
    container_name: agentic-nginx
    restart: unless-stopped
    networks:
      - agentic-management
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./configs/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./configs/nginx/sites:/etc/nginx/conf.d:ro
      - ./configs/ssl:/etc/ssl/certs:ro
      - /var/log/nginx:/var/log/nginx
    depends_on:
      - agentic-app
    security_opt:
      - no-new-privileges:true

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: agentic-prometheus
    restart: unless-stopped
    networks:
      - agentic-internal
      - agentic-management
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.external-url=http://prometheus.internal.local'
      - '--storage.tsdb.retention.time=90d'
    volumes:
      - ./configs/prometheus:/etc/prometheus:ro
      - prometheus_data:/prometheus
    security_opt:
      - no-new-privileges:true
    user: "65534:65534"

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: agentic-grafana
    restart: unless-stopped
    networks:
      - agentic-management
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_SECURITY_DISABLE_GRAVATAR: "true"
      GF_ANALYTICS_REPORTING_ENABLED: "false"
      GF_ANALYTICS_CHECK_FOR_UPDATES: "false"
      GF_INSTALL_PLUGINS: ""
      GF_SERVER_ROOT_URL: http://grafana.internal.local
      GF_DATABASE_TYPE: sqlite3
      GF_DATABASE_PATH: /var/lib/grafana/grafana.db
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    security_opt:
      - no-new-privileges:true
    user: "472:472"

  # Document Processing Service
  document-processor:
    image: agentic/document-processor:latest
    container_name: agentic-document-processor
    restart: unless-stopped
    networks:
      - agentic-internal
    environment:
      REDIS_URL: redis://redis:6379
      LOCALAI_URL: http://localai:8080
      MAX_DOCUMENT_SIZE: 50MB
      PROCESSING_TIMEOUT: 300
      OCR_ENABLED: "true"
      PDF_PROCESSING: "true"
    volumes:
      - app_data:/app/data
      - ./configs/ocr:/app/ocr:ro
    depends_on:
      redis:
        condition: service_healthy
      localai:
        condition: service_healthy
    security_opt:
      - no-new-privileges:true
    user: "1001:1001"
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G

  # Backup Service
  backup-service:
    image: agentic/backup-service:latest
    container_name: agentic-backup
    restart: unless-stopped
    networks:
      - agentic-internal
    environment:
      POSTGRES_URL: postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/agentic_case_management
      BACKUP_SCHEDULE: "0 2 * * *"  # Daily at 2 AM
      RETENTION_DAYS: 90
      ENCRYPTION_KEY: ${BACKUP_ENCRYPTION_KEY}
      BACKUP_PATH: /backups
    volumes:
      - backup_storage:/backups
      - app_data:/app/data:ro
      - postgres_data:/postgres:ro
      - ./configs/backup:/app/config:ro
    depends_on:
      postgres:
        condition: service_healthy
    security_opt:
      - no-new-privileges:true
    user: "1001:1001"

  # Log Aggregation
  filebeat:
    image: elastic/filebeat:8.10.0
    container_name: agentic-filebeat
    restart: unless-stopped
    networks:
      - agentic-internal
    volumes:
      - ./configs/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: filebeat -e -strict.perms=false
    user: root
    security_opt:
      - no-new-privileges:true

  # Internal DNS Resolver
  dnsmasq:
    image: andyshinn/dnsmasq:latest
    container_name: agentic-dns
    restart: unless-stopped
    networks:
      agentic-management:
        ipv4_address: 172.21.0.53
    command: >
      --keep-in-foreground
      --log-queries
      --no-resolv
      --address=/internal.local/172.21.0.10
      --address=/app.internal.local/172.21.0.10
      --address=/prometheus.internal.local/172.21.0.11
      --address=/grafana.internal.local/172.21.0.12
    cap_add:
      - NET_ADMIN
    security_opt:
      - no-new-privileges:true

  # System Health Monitor
  health-monitor:
    image: agentic/health-monitor:latest
    container_name: agentic-health-monitor
    restart: unless-stopped
    networks:
      - agentic-internal
    environment:
      CHECK_INTERVAL: 60
      ALERT_THRESHOLD: 3
      NOTIFICATION_METHOD: file
      LOG_PATH: /var/log/health
    volumes:
      - /var/log/agentic:/var/log/health
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: /app/health-monitor --airgapped
    security_opt:
      - no-new-privileges:true
    user: "1001:1001"